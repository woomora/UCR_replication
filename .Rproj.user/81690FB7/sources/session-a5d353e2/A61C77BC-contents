# ------------------------------------------------------------------------------
# ---- Workplace ----
rm(list = ls())
pacman::p_load(
  tidyverse, janitor, haven, readstata13, sjlabelled, lubridate, tidymodels,
  countrycode, fuzzyjoin, dineq, 
  fixest, binsreg, ggsignif, FactoMineR
)

select <- dplyr::select

#
# ------------------------------------------------------------------------------
# ---- Data --------------------------------------------------------------------
# PPP rates ----
ppp <- 
  read_csv("data/source/PPP World Bank/API_PA.NUS.PPP_DS2_en_csv_v2_1927762.csv", skip = 3) |> 
  clean_names()

ppp <- 
  ppp |>  
  rename(
    country = country_name, 
    countrycode = country_code
  ) |>  
  select(-country, -indicator_name, -indicator_code) |>  
  pivot_longer(!c(countrycode), names_to = "year", values_to = "pppexrate") |>  
  mutate(year = as.numeric(str_remove(year, "x"))) |>  
  filter(year >= 2010)

# LAPOP: Variables of interest across waves ----

variables_harmonized <- 
  c(
    "idnum", # Interview ID
    "pais", # Country 
    # countrycode, # Country code ISO
    "year", # Year
    "estratopri", # Primary stratum
    "upm", # Unidad primaria de muestreo (UPM)
    "wt", # Weight
    "weight1500", # Harmonized weight
    "prov", # Province/State
    "municipio", # Municipality
    "cluster", # Cluster
    "ur", # Urban/Rural
    "tamano", # Population size
    "idiomaq", # Interview's Language
    # "fecha", # Interview's date
    "q1", # Sex
    "q2", # Age
    "ed", "edre", # Years of schooling
    "nationality", # Nationality
    "q11", "q11n", # Marital status
    "q12", # Number of children
    "q12c", # Household size
    "q3c", # Religion
    "colorr", # PERLA 
    "etid", # Ethnicity
    "leng1", # Language
    "leng4", # Parents language
    # Household assets
    "r1", "r3", "r4", "r4a", "r5", "r6", "r7", "r8", "r12", "r14", "r15",  
    "ocup1a", # Salary status
    "ocup4a", # Ocupation
    "ocupoit", # Ocupation OIT
    "ed2", # Mothers' education
    # Income
    "q10new", # Household Income,
    "q10new_12", "q10new_14", "q10new_16", "q10new_18", "q10inc",
    "q10g", # Personal income
    "q10g_12", "q10g_14", "q10g_16",
    "q10a", # Remittances
    "q10e", # Income increased or decreased
    # Discrimination
    "dis2", "dis3", "dis5", 
    # Media and political opinions
    "a1", "a2", "a3", 
    "www1", # Internet use
    # Media and political opinions
    "b1", "b2", "b3", "b4", "b5", "b6", 
    # Interest in democracy
    "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8",
    "eff1", "eff2",
    "it1", #Interpersonal trust, 
    "m1", "m2", # Executive and Congress approval
    "pn4", "ing4", # Satisfaction with Democracy
    "dem23", # Democracy can exist without political parties
    "ros1", "ros2", "ros3", "ros4", "ros5", "ros6", # Preferences for redistribution
    # Preferences for redistribution
    "soc1", "soc2a", "soc2b", "soc3", "soc4",
    "soc5", "soc6", "soc7", "soc8", "soc9",
    "soc10", "soc11", "soc12a", "soc12b", 
    "l1", # Political ideology
    "ls3", # Life satisfaction
    "pol1", # Political Interest 
    "q5b", # Importance and religion,
    "vb1", # Registered to vote
    "vb10", # Identification to political party
    "vb2", # Voted in last elections
    "vb20", # Vote for incumbet
    "colori", "sexi", # Interviewer data
    "intid", "inteval", 
    "b43", # To what extent are you proud of being [Nationality]?
    "mil5" # How proud do you feel to be [nationality] when you hear the national anthem?
  )

# --- LAPOP merge datasets per country ----
lapop_raw <- tibble()

list_of_files <-
  list.files(
    path = "data/source/lapop/merge_by_country",
    recursive = TRUE,
    pattern = "\\.sav$",
    full.names = TRUE
  )
  
for (f in list_of_files) {
  
  countrycode <- str_sub(f, start = 36, end = 38)
  
  print(countrycode)
  
  foo <- 
  haven::read_sav(f) |> 
    filter(year >= 2012) |> 
    filter(year <= 2017) |> 
    haven::as_factor(
      levels = c("default"),
      ordered = FALSE
    ) |>
    select(any_of(variables_harmonized)) |> 
    mutate(
      # Country without accents
      pais = stringi::stri_trans_general(pais, "Latin-ASCII"),
      # ISO code
      countrycode = countrycode
    )
  
  lapop_raw <- 
    lapop_raw |> 
    bind_rows(
      foo
    )
  
}

lapop_raw <- 
  lapop_raw |> 
  mutate(
    year = as.numeric(as.character(year))
  ) 

# Create variables of interest ----
lapop <- 
  lapop_raw |> 
  rename(
    sex = q1,
    age = q2,
    hh_kids = q12,
    hh_total = q12c,
    religion = q3c,
    etnia = etid,
    lengua = leng1,
    lengua_pad = leng4,
    assets_car = r5,
    assets_tv = r1,
    assets_ref = r3,
    assets_phone = r4,
    assets_cellphone = r4a,
    assets_washmch = r6,
    assets_microw = r7,
    assets_motorcyc = r8,
    assets_plumbing = r12,
    assets_bath = r14,
    assets_computer = r15,
    salary_status = ocup1a,
    occupa_status = ocup4a,
    mothers_ed = ed2,
    remittances = q10a,
    subj_income_growth = q10e,
    dis_gov = dis2,
    dis_school = dis3,
    dis_public = dis5,
    national_identity_proud = b43,
    national_identity_anthem = mil5,
    trust = it1,
    political_ideol = l1
  ) |> 
  # Replace Non-response, Don't know and No Answer
  mutate_if(
    is.factor,
    ~ case_when(
      . %in% c(
        "NR", "DK", "N/A", "N/A Country", "No Response", "Don't Know", 
        "Not Applicable", "Not asked in this country or year", "Not asked in this year",
        "Could not be classified"
      )  ~ NA_character_,
      T ~ as.factor(.)
    )
  ) |> 
  mutate(
    # ID number
    idobs = 1:nrow(lapop_raw),
    # Gender 
    sex = if_else(sex %in% c("Mujer", "Female"), "Female", "Male"), 
    # Gender (interviewer)
    sexi = if_else(sexi %in% c("Mujer", "Female"), "Female", "Male"),
    # Within-Country weights 
    wt = as.numeric(wt),
    # Between-Country weights 
    weight1500 = as.double(weight1500),
    # Municipality within country
    country_mun = str_c(countrycode, "_", municipio),
    country_mun = str_replace_all(country_mun, c("\\(" = "", "\\)" = "", "\\+" = "", "\\&" = "", "\\." = "", "\\," = "","\\/" = "")),
    country_mun = str_replace_all(country_mun, c(" " = "_", "-"  = "_")),
    # Region within country
    country_prov = str_c(countrycode, "_", prov),
    country_prov = str_replace_all(country_prov, c("\\(" = "", "\\)" = "", "\\+" = "", "\\&" = "", "\\." = "", "\\," = "","\\/" = "")),
    country_prov = str_replace_all(country_prov, c(" " = "_", "-"  = "_")),
    # Region within country
    country_region = str_c(countrycode, "_", estratopri),
    country_region = str_replace_all(country_region, c("\\(" = "", "\\)" = "", "\\+" = "", "\\&" = "", "\\." = "", "\\," = "","\\/" = "")),
    country_region = str_replace_all(country_region, c(" " = "_", "-"  = "_")),
    # Cluster ID: Within municipality cluster x year
    cluster_id = str_c(country_mun, "-", year, "-", cluster),
    # Region in continent
    region = case_when(
      countrycode %in% c("ARG", "BOL", "BRA", "CHL", "COL", "ECU", "GUY", "PER", "PRY", "SUR", "URY", "VEN") ~ "South America",
      countrycode %in% c("BLZ", "CRI", "GTM", "HND", "MEX", "NIC", "PAN", "SLV") ~ "Central_America", 
      T ~ "Caribbean"
    ),
    # Area size
    tamano = case_when(
      str_detect(tamano, "Capital") == T ~ "National Capital (Metropolitan Area)",
      str_detect(tamano, "Rural") == T ~ "Rural Area",
      str_detect(tamano, "medi") == T ~ "Medium City",
      tamano %in% c("Ciudad grande", "Large City") ~ "Large City",
      tamano %in% c("Ciudad peque√±a", "Small City") ~ "Small City",
    ),
    tamano = fct_relevel(
      tamano, "Rural Area", "Small City", "Medium City", "Large City", "National Capital (Metropolitan Area)"
    ),
    # Age
    age = as.numeric(age),
    # Year born 
    year_born = year - age,
    # Cohort
    cohort = case_when(
      year_born <= 1949 ~ "Before 1950s",
      year_born %in% c(1950:1959) ~ "1950s",
      year_born %in% c(1960:1969) ~ "1960s",
      year_born %in% c(1970:1979) ~ "1970s",
      year_born %in% c(1980:1989) ~ "1980s",
      year_born >= 1990 ~ "1990s",
    ),
    cohort = fct_relevel(
      cohort, "Before 1950s", "1950s", "1960s", "1970s", "1980s", "1990s"
    ),
    # Marital status
    marital_status = q11,
    marital_status = if_else(is.na(marital_status), q11n, marital_status),
    marital_status = stringi::stri_trans_general(marital_status, "Latin-ASCII"),
    marital_status = case_when(
      marital_status %in% c("Soltero", "Solteiro", "Single", "Soltero [Pasar a Q12C]", "Soltero(a)",
                            "single", "Soltero  [Pasar a Q12C]", "Soltero (Omenda'yva)") ~ "Single",
      marital_status %in% c("Casado", "Casado (Omendava)", "Casado [Siga]", "Casado(a)", 
                            "married", "Married") ~ "Married",
      str_detect(marital_status, "(?i)Divorc") == T | str_detect(marital_status, "(?i)Separ") == T ~ "Divorced",
      str_detect(marital_status, "(?i)Viu") == T | str_detect(marital_status, "(?i)Widowed") == T ~ "Widowed",
      str_detect(marital_status, "(?i)Union") == T | str_detect(marital_status, "(?i)Common") == T ~ "Common law marriage",
      marital_status %in% c("Living together but not married", "Amigado(a) (casado na pratica mas nao no papel)",
                            "Conviviente") ~ "Common law marriage",
      T ~ NA_character_
    ),
    # No. kids in household
    hh_kids = case_when(
      hh_kids %in% c("None", "Ninguno") ~ 0,
      hh_kids == "20+" ~ 20,
      hh_kids == "25+" ~ 26,
      T ~ as.numeric(as.character(hh_kids))
    ),
    # No. people in household
    hh_total = case_when(
      hh_kids %in% c("None", "Ninguno") ~ 0,
      hh_kids == "20+" ~ 20,
      hh_kids == "25+" ~ 26,
      T ~ as.numeric(as.character(hh_total)),
    ),
    hh_total = case_when(
      hh_total == 0 ~ 1,
      is.na(hh_total) == T & marital_status %in% c("Divorced", "Single", "Widowed") ~ 1,
      is.na(hh_total) == T & marital_status %in% c("Married", "Common law marriage") ~ 2,
      T ~ hh_total
    ),
    # Religion
    religion = stringi::stri_trans_general(religion, "Latin-ASCII"),
    religion = case_when(
      str_detect(religion, "(?i)Catolico") == T | str_detect(religion, "(?i)Catholic") == T ~ "Catholic",
      str_detect(religion, "(?i)Agnostic") == T | str_detect(religion, "(?i)Atheist") == T |
        str_detect(religion, "(?i)None") == T | str_detect(religion, "(?i)Ninguna") == T ~ "Agnostic",
      str_detect(religion, "(?i)Mormon") == T | str_detect(religion, "(?i)Mormones") == T ~ "Mormon",
      str_detect(religion, "(?i)Judio") == T | str_detect(religion, "(?i)Jewish") == T ~ "Jewish",
      str_detect(religion, "(?i)Other") == T | str_detect(religion, "(?i)Otro") == T ~ "Other",
      str_detect(religion, "(?i)Jehova") == T ~ "Jehovah's Witness",
      str_detect(religion, "(?i)Protestant") == T & str_detect(religion, "(?i)no") == T ~ "Protestant non-Evangelical",
      str_detect(religion, "(?i)Tradi") == T ~ "Traditional or Native Religion",
      str_detect(religion, "(?i)stian") == T & str_detect(religion, "(?i)no") == T ~ "Non-Christian Eastern Religion",
      religion == "Evangelica y Pentecostal" ~ "Evangelical and Pentecostal",
      religion == "Espirita Kardecista" ~ "Other",
      T ~ religion
    ),
    # Skin tone
    colorr = stringi::stri_trans_general(colorr, "Latin-ASCII"),
    colorr = str_to_lower(colorr),
    colorr = case_when(
      colorr %in% c("very light", "mas claro") ~ 1,
      colorr %in% c("very dark", "mas oscuro") ~ 11,
      T ~ as.numeric(as.character(colorr))
    ),
    # Skin tone top coded
    colorr_topc = if_else(colorr >= 9, 9, colorr),
    # Ethnicity
    etnia = stringi::stri_trans_general(etnia, "Latin-ASCII"),
    etnia = str_remove_all(etnia, "\""),
    etnia = case_when(
      etnia %in% c("White", "Mestizo", "Indigenous", "Black", "Other") ~ etnia,
      etnia %in% c("Mulatto", "Morena", "Mixed", "Criollo", "Hispanic or Latino", 
                   "Mixed Race", "Moreno", "Mestiza", "Mulata", "Mestiza/India", "Ladina") ~ "Mestizo",
      etnia %in% c("Amarela", "Indian", "Chinese", "Chino", "Asian", "Oriental", 
                   "Yellow", "Asian or Asian American", "Asiatico") ~ "Other",
      etnia %in% c("Hind√∫", "Hindustani (East Indians)", "East Indian", 
                   "Hindustani (East Indians)") ~ "Other",
      etnia %in% c("Otra", "Jewish") ~ "Other",
      etnia %in% c("Gar√≠funa", "Maroons", "Zamba", "Garifuna", "Afro-Surinamese/Creole",
                   "Black or Afro-Guyanese", "Garifuna or black", "Negra", 
                  "Negra/dominicano negro") ~ "Black",
      etnia %in% c("Maya Ketchi", "Maya Mopan", "Maya Yucatec", "Quechua", "Aymara", 
                   "Amazonian", "Native American", "Indo-guyan√©s", "Amerindian",
                   "De la Amazonia", "Indian (Indigenous)", "Indigena", "Indigena - originaria",
                   "Indo-Guyanese"
                   ) ~ "Indigenous",
      etnia %in% c("Syrian/Lebanese", "Mennonite", "Menonitas", "Javanese", "Middle Eastern", "Jews", "Creole") ~ "Other",
      etnia %in% c("Portuguese", "Espa√±ol", "Hispanic", "Spanish", "Blanca",
                   "Caucasian (White)", "Portugues") ~ "White",
    ),
    etnia = fct_relevel(
      etnia, "White",  "Mestizo", "Indigenous", "Black", "Other",
    ),
    # Salary status
    salary_status = case_when(
      salary_status %in% c(
        "A salaried employee of the government or an independent state-owned enterprise?",
        "Salaried employee of government or state-owned enterprise",
        "Asalariado del gobierno o empresa estatal"
      ) ~ "Salaried - Government",
      salary_status %in% c(
        "A salaried employee in the private sector?",
        "Salaried employee in the private sector",
        "Asalariado en el sector privado"
      ) ~ "Salaried - Private sector",
      salary_status %in% c(
        "Owner or partner in a business",
        "Patrono o socio de empresa"
      ) ~ "Owner",
      salary_status %in% c(
        "Self-employed", "Trabajador por cuenta propia"
      ) ~ "Self-employed",
      salary_status %in% c(
        "Unpaid worker", "Trabajador no remunerado o sin pago"
      ) ~ "Unpaid worker",
      T ~ salary_status
    ),
    salary_status = fct_relevel(
      salary_status, "Unpaid worker", "Self-employed", "Salaried - Government", "Salaried - Private sector", "Owner"
    ),
    # Occupational status
    occupa_status = str_remove_all(occupa_status, "\\?"),
    occupa_status = case_when(
      str_detect(occupa_status, "stud") ~ "Student",
      str_detect(occupa_status, "(?i)Activ") ~ "Unemployed",
      str_detect(occupa_status, "(?i)jubilado") | str_detect(occupa_status, "(?i)pension")
      | str_detect(occupa_status, "(?i)retir") ~ "Retired",
      str_detect(occupa_status, "(?i)but have a job") |
        str_detect(occupa_status, "(?i)pero tiene trabajo")
         ~ "Not working, but have a job",
      str_detect(occupa_status, "(?i)No trabaja y no est√° buscando trabajo") |
        str_detect(occupa_status, "(?i)Not working and not looking for a job")
        ~ "Inactive",
      str_detect(occupa_status, "(?i)quehaceres") |
        str_detect(occupa_status, "(?i)Taking care of the home")
      ~ "Taking care of the home",
      str_detect(occupa_status, "(?i)Trabajando") ~ "Working",
      T ~ occupa_status
    ),
    occupa_status = fct_relevel(
      occupa_status, "Inactive", "Unemployed", "Housework", "Working", "Retired"
    ),
    # Education (continous)
    edc = case_when(
      ed %in% c("None", "Ninguno") ~ 0,
      ed == "18+" ~ 18,
      T ~ as.numeric(as.character(ed))
    ),
    # Educational levels ISCED
    ed_isced = case_when(
      edc < 6 ~ "Less than primary",
      edc == 6 ~ "Primary",
      edc %in% c(6:9) ~ "Lower secondary",
      edc %in% c(9:12) ~ "Upper secondary",
      edc >= 13 ~ "Tertiary"
    ),
    ed_isced = fct_relevel(
      ed_isced, "Less than primary", "Primary", "Lower secondary", "Upper secondary", "Tertiary"
    ),
    # Complete secondary school
    ed_isced_tertiary = if_else(edc >= 13, 1, 0),
    # Grad student
    grad_student = case_when(
      occupa_status == "Studying" & edc >= 13 ~ 1,
      TRUE ~ 0
    ),
    # GDIM sample requirements
    gdim_sample = case_when(
      age > 21 | occupa_status != "Studying" ~ 1,
      grad_student == 1 ~ 1,
      TRUE ~ 0
    ),
    # Mother's education
    mothers_ed = case_when(
      mothers_ed == "Ninguno" ~ "None",
      mothers_ed == "Primaria incompleta" ~ "Primary incomplete",
      mothers_ed == "Primaria completa" ~ "Primary complete",
      mothers_ed %in% c("Secundaria o bachillerato incompleto", "Secundaria incompleta") ~ "Secondary incomplete",
      mothers_ed %in% c("Secundaria o bachillerato completo", "Secundaria completa") ~ "Secondary complete",
      mothers_ed == "T√©cnica/Tecnol√≥gica incompleta" ~ "Technical school/Associate degree incomplete",
      mothers_ed == "T√©cnica/Tecnol√≥gica completa" ~ "Technical school/Associate degree complete",
      mothers_ed == "Universitaria incompleta" ~ "University incomplete",
      mothers_ed == "Universitaria completa" ~ "University complete",
      T ~ mothers_ed
    ),
    mothers_ed = fct_relevel(
      mothers_ed,
      "None",
      "Primary incomplete",
      "Primary complete",
      "Secondary incomplete",
      "Secondary complete",
      "Technical school/Associate degree incomplete",
      "Technical school/Associate degree complete",
      "University incomplete",
      "University complete",
    ),
    # Mother's education continuous
    mothers_edc = case_when(
      mothers_ed == "None" ~ 0,
      mothers_ed == "Primary incomplete" ~ 3,
      mothers_ed == "Primary complete" ~ 6,
      mothers_ed == "Secondary incomplete" ~ 7.5,
      mothers_ed == "Secondary complete" ~ 9,
      mothers_ed == "Technical school/Associate degree incomplete" ~ 10.5,
      mothers_ed == "Technical school/Associate degree complete" ~ 12,
      mothers_ed == "University incomplete" ~ 14,
      mothers_ed == "University complete" ~ 16,
    ),
    # Mother's education ISCED
    mothers_ed_isced = case_when(
      mothers_ed %in% c("None", "Primary incomplete") ~ "Less than primary",
      mothers_ed %in% c("Primary complete") ~ "Primary",
      mothers_ed %in% c("Secondary incomplete") ~ "Lower secondary",
      mothers_ed %in% c("Secondary complete",  "Technical school/Associate degree incomplete", "University incomplete") ~ "Upper secondary",
      mothers_ed %in% c("Technical school/Associate degree complete", "University complete") ~ "Tertiary",
    ),
    mothers_ed_isced = fct_relevel(
      mothers_ed_isced, 
      "Less than primary",
      "Primary",
      "Lower secondary",
      "Upper secondary",
      "Tertiary"
    ),
    # Absolute Educational IM 
    abs_ed_im = case_when(
      mothers_ed_isced != "Tertiary" & as.numeric(ed_isced) > as.numeric(mothers_ed_isced) ~ 1,
      mothers_ed_isced != "Tertiary" & as.numeric(ed_isced) <= as.numeric(mothers_ed_isced) ~ 0,
      mothers_ed_isced == "Tertiary" & as.numeric(ed_isced) == as.numeric(mothers_ed_isced) ~ 1,
      mothers_ed_isced == "Tertiary" & as.numeric(ed_isced) <= as.numeric(mothers_ed_isced) ~ 0,
      T ~ NA_real_
    ),
    # Interviewer's skin tone
    colori = stringi::stri_trans_general(colori, "Latin-ASCII"),
    colori = str_to_lower(colori),
    colori = case_when(
      colori %in% c("very light", "mas claro") ~ 1,
      colori %in% c("very dark", "mas oscuro") ~ 11,
      T ~ as.numeric(as.character(colori))
    ),
    # National identity: Proud scale
    national_identity_proud = str_remove_all(national_identity_proud, "\\("),
    national_identity_proud = str_remove_all(national_identity_proud, "\\)"),
    national_identity_proud = case_when(
      str_detect(national_identity_proud, "Nada") == T ~ "1",
      str_detect(national_identity_proud, "(?i)not at") == T ~ "1",
      str_detect(national_identity_proud, "Mucho") == T ~ "7",
      str_detect(national_identity_proud, "(?i)lot") == T ~ "7",
      T ~ national_identity_proud 
    ),
    national_identity_proud = as.numeric(national_identity_proud),
    # National identity: Anthem binary
    national_identity_anthem = stringi::stri_trans_general(national_identity_anthem, "Latin-ASCII"),
    national_identity_anthem = case_when(
      str_detect(national_identity_anthem, "(?i)Algo orgul") == T ~ "0",
      str_detect(national_identity_anthem, "(?i)Somewhat proud") == T ~ "0",
      str_detect(national_identity_anthem, "(?i)Do you not care") == T ~ "0",
      str_detect(national_identity_anthem, "(?i)O no le importa?") == T ~ "0",
      str_detect(national_identity_anthem, "(?i)or You do not care?") == T ~ "0",
      str_detect(national_identity_anthem, "(?i)Nao se importa?") == T ~ "0",
      str_detect(national_identity_anthem, "(?i)Nada orgul") == T ~ "0",
      str_detect(national_identity_anthem, "(?i)Not at all proud") == T ~ "0",
      T ~ "1" 
    ),
    national_identity_anthem = as.numeric(national_identity_anthem),
    # Interpersonal trust
    trust = case_when(
      str_detect(trust,"Algo confiable") == T ~ "Somewhat trustworthy",
      str_detect(trust,"Muy confiable") == T ~ "Very trustworthy",
      str_detect(trust,"Nada confiable") == T ~ "Untrustworthy",
      str_detect(trust,"Poco confiable") == T ~ "Not very trustworthy",
      T ~ trust
    ),
    # Interpersonal trust
    trust = case_when(
      trust == "Very trustworthy" ~ 4,
      trust == "Somewhat trustworthy" ~ 3,
      trust == "Not very trustworthy" ~ 2,
      trust == "Untrustworthy" ~ 1,
    ),
    # Political ideology
    political_ideol = case_when(
      political_ideol %in% c("Left", "Izquierda") ~ 1,
      political_ideol %in% c("Right", "Derecha") ~ 10,
      T ~ as.numeric(as.character(political_ideol))
    ),
    # Assets: Number of cars
    assets_car = case_when(
      assets_car == "No" ~ 0,
      assets_car %in% c("One", "Uno") ~ 1,
      assets_car %in% c("Two", "Dos") ~ 2,
      assets_car %in% c("Three or more", "Tres o m√°s") ~ 3,
    ),
  ) |> 
  mutate_at(
    vars(
      assets_tv, assets_ref, assets_phone, assets_cellphone, assets_washmch,
      assets_microw, assets_motorcyc, assets_plumbing, assets_bath, assets_computer,
      remittances, dis_gov, dis_school, dis_public
    ),
    ~ case_when(
      . %in% c("Yes", "S√≠", "Si") ~ 1,
      . == "No" ~ 0,
      T ~ NA_real_
    )
  ) |> 
  # Filter obsertvations without clean controls
  filter(!is.na(age)) |> 
  filter(!is.na(sex)) |> 
  filter(!is.na(colorr)) |> 
  # Educational mobility: by country and cohort
  group_by(countrycode, cohort) |> 
  mutate(
    mothers_ed_pct = weighted_ntile(mothers_edc, weights = weight1500, 100),
    ed_pct = weighted_ntile(edc,  weights = weight1500, 100),
  ) |> 
  ungroup() |> 
  # Husehold Income *****
  mutate(
    hhincome = case_when(
      year == 2012 ~ q10new_12,
      year == 2014 ~ q10new_14,
      year >= 2016 ~ q10new_16,
    ),
    hhincome = stringi::stri_trans_general(hhincome, "Latin-ASCII"),
    # Remove $ . , 
    hhincome = str_remove_all(hhincome, "\\$"),
    hhincome = str_remove_all(hhincome, "\\,"),
    hhincome = str_remove_all(hhincome, "\\."),
    # Harmonize sign diving the lower and upper bound quantity
    hhincome = str_replace(hhincome, " ‚Äì ", "-"),
    hhincome = str_replace(hhincome, " - ", "-"),
    hhincome = str_replace(hhincome, " and ", "-"),
    hhincome = str_replace(hhincome, " y ", "-"),
    hhincome = str_replace(hhincome, " a ", "-"),
    hhincome = str_replace(hhincome, " to ", "-"),
    # Remove bracket sets
    hhincome = str_replace(hhincome, "\\[..\\]", ""),
    # Remove set's pre-fix
    hhincome = case_when(
      str_detect(hhincome, "De ") == T ~ str_c("-", str_remove_all(hhincome, "De ")),
      #
      str_detect(hhincome, "Mas de") == T ~ str_c(str_remove_all(hhincome, "Mas de"), "-"),
      str_detect(hhincome, "More than") == T ~ str_c(str_remove_all(hhincome, "More than"), "-"),
      str_detect(hhincome, "Above") == T ~ str_c(str_remove_all(hhincome, "Above"), "-"),
      #
      str_detect(hhincome, "Menos de") == T ~ str_c("-", str_remove_all(hhincome, "Menos de")),
      str_detect(hhincome, "Less than") == T ~ str_c("-", str_remove_all(hhincome, "Less than")),
      str_detect(hhincome, "Below") == T ~ str_c("-", str_remove_all(hhincome, "Below")),
      #
      T ~ hhincome
    ),
    # Remove 'Entre' and 'Between'
    hhincome = str_remove_all(hhincome, "(?i)Entre"),
    hhincome = str_remove_all(hhincome, "(?i)De"),
    hhincome = str_remove_all(hhincome, "(?i)Between"),
    hhincome = str_remove_all(hhincome, "(?i)From"),
    # Remove currencies
    hhincome = str_remove_all(hhincome, "(?i)pesos"),
    hhincome = str_remove_all(hhincome, "(?i)soles"),
    hhincome = str_remove_all(hhincome, "(?i)quetzales"),
    hhincome = str_remove_all(hhincome, "(?i)cordobas"),
    hhincome = str_remove_all(hhincome, "(?i)gourdes"),
    hhincome = str_remove_all(hhincome, "(?i)gours"),
    hhincome = str_remove_all(hhincome, "(?i)Bs"),
    hhincome = str_remove_all(hhincome, "(?i)L"),
    hhincome = str_remove_all(hhincome, "(?i)BZ"),
    hhincome = str_remove_all(hhincome, "SRD"),
    hhincome = str_remove_all(hhincome, "R"),
    # No income to zero
    hhincome = case_when(
      str_detect(hhincome, "(?i)No income") == T ~ "0-",
      str_detect(hhincome, "(?i)Ningun ingreso") == T ~ "0-",
      str_detect(hhincome, "(?i)None") == T ~ "0-",
      T ~ hhincome
    ),
    # Remove initial "-" for those that incorrectly have it
    hhincome = case_when(
      str_count(hhincome, "-") == 0 ~ str_c(hhincome, "-"),
      str_count(hhincome, "-") == 2 ~ str_remove(hhincome, "-"),
      T ~ hhincome
    ),
    # Remove all remaining white spaces " ",
    hhincome = str_remove_all(hhincome, " "),
    # Lower bound
    hhincome_lb = str_split(hhincome, "-", 2, simplify = TRUE)[,1],
    # Upper bound
    hhincome_ub = str_split(hhincome, "-", 2, simplify = TRUE)[,2],
    # Median income per bracket
    hhincome = case_when(
      !is.na(hhincome_lb) & !is.na(hhincome_ub) ~ (as.numeric(hhincome_lb) + as.numeric(hhincome_ub))/2,
      hhincome_lb == "" & !is.na(hhincome_ub) ~ as.numeric(hhincome_ub),
      is.na(hhincome_lb) ~ NA_real_
    ),
  ) |> 
  select(-hhincome_lb, -hhincome_ub) |> 
  # Personal Income *****
  mutate(
    income = case_when(
      year == 2012 ~ q10g_12,
      year == 2014 ~ q10g_14,
      year >= 2016 ~ q10g_16,
    ),
    income = stringi::stri_trans_general(income, "Latin-ASCII"),
    # Remove $ . , 
    income = str_remove_all(income, "\\$"),
    income = str_remove_all(income, "\\,"),
    income = str_remove_all(income, "\\."),
    # Harmonize sign diving the lower and upper bound quantity
    income = str_replace(income, " ‚Äì ", "-"),
    income = str_replace(income, " - ", "-"),
    income = str_replace(income, " and ", "-"),
    income = str_replace(income, " y ", "-"),
    income = str_replace(income, " a ", "-"),
    income = str_replace(income, " to ", "-"),
    # Remove bracket sets
    income = str_replace(income, "\\[..\\]", ""),
    # Remove set's pre-fix
    income = case_when(
      str_detect(income, "De ") == T ~ str_c("-", str_remove_all(income, "De ")),
      #
      str_detect(income, "Mas de") == T ~ str_c(str_remove_all(income, "Mas de"), "-"),
      str_detect(income, "More than") == T ~ str_c(str_remove_all(income, "More than"), "-"),
      str_detect(income, "Above") == T ~ str_c(str_remove_all(income, "Above"), "-"),
      #
      str_detect(income, "Menos de") == T ~ str_c("-", str_remove_all(income, "Menos de")),
      str_detect(income, "Less than") == T ~ str_c("-", str_remove_all(income, "Less than")),
      str_detect(income, "Below") == T ~ str_c("-", str_remove_all(income, "Below")),
      #
      T ~ income
    ),
    # Remove 'Entre' and 'Between'
    income = str_remove_all(income, "(?i)Entre"),
    income = str_remove_all(income, "(?i)De"),
    income = str_remove_all(income, "(?i)Between"),
    income = str_remove_all(income, "(?i)From"),
    # Remove currencies
    income = str_remove_all(income, "(?i)pesos"),
    income = str_remove_all(income, "(?i)soles"),
    income = str_remove_all(income, "(?i)quetzales"),
    income = str_remove_all(income, "(?i)cordobas"),
    income = str_remove_all(income, "(?i)gourdes"),
    income = str_remove_all(income, "(?i)gours"),
    income = str_remove_all(income, "(?i)Bs"),
    income = str_remove_all(income, "(?i)L"),
    income = str_remove_all(income, "(?i)BZ"),
    income = str_remove_all(income, "SRD"),
    income = str_remove_all(income, "R"),
    # No income to zero
    income = case_when(
      str_detect(income, "(?i)No income") == T ~ "0-",
      str_detect(income, "(?i)Ningun ingreso") == T ~ "0-",
      str_detect(income, "(?i)None") == T ~ "0-",
      T ~ income
    ),
    # Remove initial "-" for those that incorrectly have it
    income = case_when(
      str_count(income, "-") == 0 ~ str_c(income, "-"),
      str_count(income, "-") == 2 ~ str_remove(income, "-"),
      T ~ income
    ),
    # Remove all remaining white spaces " ",
    income = str_remove_all(income, " "),
    # Lower bound
    income_lb = str_split(income, "-", 2, simplify = TRUE)[,1],
    # Upper bound
    income_ub = str_split(income, "-", 2, simplify = TRUE)[,2],
    # Median income per bracket
    income = case_when(
      !is.na(income_lb) & !is.na(income_ub) ~ (as.numeric(income_lb) + as.numeric(income_ub))/2,
      income_lb == "" & !is.na(income_ub) ~ as.numeric(income_ub),
      is.na(income_lb) ~ NA_real_
    ),
  ) |> 
  select(-income_lb, -income_ub) |> 
  # Convert income to PPP
  left_join(ppp) |> 
  mutate(
    income = income/pppexrate,
    hhincome = hhincome/pppexrate,
    # Household income per capita
    hhincomepc = hhincome/hh_total,
    # Shut off extensive margin
    hhincomepc_mx0 = calibrate_ext_margin(hhincomepc),
    income_mx0 = calibrate_ext_margin(income),
  ) 

# Create dummy indicator of most common language ----

# Step 1: Identify the most common language per country
most_common_language <- 
  lapop |> 
  filter(!is.na(lengua)) |> 
  group_by(countrycode, lengua) |> 
  summarise(
    n = sum(weight1500, na.rm = T)
  ) |> 
  ungroup() |> 
  group_by(countrycode) |> 
  top_n(1, wt = n) |> 
  select(countrycode, lengua) |> 
  rename(
    lengua_most_common = lengua
  )

# Step 2: Create an indicator variable for each individual
lapop <- 
  lapop |> 
  left_join(most_common_language) |> 
  mutate(lengua_most_common = if_else(lengua == lengua_most_common, 1, 0))

rm(most_common_language)

# HH asset index via PCA ----
# Index includes: Television, Fridge, Washing Machine, Microwave, Telephone, Cellphone, 
# Number of cars, Motocycles, Drinking Water at home, Bathroom at home, Computer
hh_asset_index <- tibble()

for (p in levels(factor(lapop$countrycode))) {
  
  print(p)
  
  foo <- lapop |> filter(countrycode == p)
  
  if (dim(foo)[1] != 0) {
    
    foo1 <- 
      foo |> 
      select(idobs, hhincomepc_mx0, assets_car, assets_tv, assets_ref, assets_phone, assets_cellphone, assets_washmch,
             assets_microw, assets_motorcyc, assets_plumbing, assets_bath, assets_computer) |> 
      drop_na() |> 
      data.frame()
    
    if (dim(foo1)[1] != 0) {
      
      pca1 <- prcomp(foo1[,-c(1:2)], scale = T, center = T)
      summary(pca1)
      ppca1 <- as_tibble(predict(pca1))
      
      foo1 <- 
        foo1 |> 
        mutate(
          ind_riq = ppca1$PC1,
          cor = cor(ind_riq, hhincomepc_mx0),
          ind_riq = if_else(cor > 0 , ind_riq, -ind_riq)
        ) |> 
        tibble() |> 
        select(idobs, ind_riq, hhincomepc_mx0)
      
      hh_asset_index <- 
        hh_asset_index |> 
        bind_rows(foo1)
      
    }
    
  }
  
}

rm(foo, foo1, pca1, ppca1)

lapop <- lapop |> left_join(hh_asset_index)

#
# Harmonize intra-country regions ----
lapop <- 
  lapop %>% 
  mutate(
    
    prov = as.character(prov),
    
    # Mexico
    prov = case_when(
      countrycode == "MEX" & prov == "Estado de M√©xico" ~ "M√©xico",
      TRUE ~ prov
    ),
    
    # Argentina 
    prov = case_when(
      countrycode == "ARG" & prov == "1701" ~ "AMBA",
      countrycode == "ARG" & prov == "1702" ~ "C√≥rdoba",
      countrycode == "ARG" & prov == "1703" ~ "Santa Fe",
      countrycode == "ARG" & prov == "1704" ~ "Entre R√≠os",
      countrycode == "ARG" & prov == "1706" ~ "Corrientes",
      countrycode == "ARG" & prov == "1707" ~ "Chaco",
      countrycode == "ARG" & prov == "1709" ~ "Salta",
      countrycode == "ARG" & prov == "1710" ~ "Santiago del Estero",
      countrycode == "ARG" & prov == "1711" ~ "Tucum√°n",
      countrycode == "ARG" & prov == "1714" ~ "Mendoza",
      countrycode == "ARG" & prov == "1715" ~ "San Juan",
      countrycode == "ARG" & prov == "1719" ~ "Neuqu√©n",
      countrycode == "ARG" & prov == "1720" ~ "R√≠o Negro",
      countrycode == "ARG" & prov == "1722" ~ "Prov. de Buenos Aires",
      countrycode == "ARG" & prov == "1723" ~ "La Pampa",
      TRUE ~ prov
    ),
    
    country_region = case_when(
      countrycode == "ARG" & prov == "Ciudad de Buenos Aires" ~ "ARG_AMBA_Capital_Federal_y_GBA",
      countrycode == "ARG" & prov == "Buenos Aires" ~ "ARG_Prov_de_Buenos_Aires",
      
      countrycode == "ARG" & prov == "San Luis" ~ "ARG_Cuyo",
      
      countrycode == "ARG" & prov == "Chubut" ~ "ARG_Patagonia",
      countrycode == "ARG" & prov == "Santa Cruz" ~ "ARG_Patagonia",
      countrycode == "ARG" & prov == "Tierra del Fuego" ~ "ARG_Patagonia",
      
      countrycode == "ARG" & prov == "Catamarca" ~ "ARG_NOA",
      countrycode == "ARG" & prov == "Jujuy" ~ "ARG_NOA",
      countrycode == "ARG" & prov == "La Rioja" ~ "ARG_NOA",
      
      countrycode == "ARG" & prov == "Misiones" ~ "ARG_NEA",
      countrycode == "ARG" & prov == "Formosa" ~ "ARG_NEA",
      TRUE ~  country_region 
    ),
    
    country_region = case_when(
      countrycode == "ARG" & country_region == "ARG_Capital_Federal" ~ "ARG_AMBA_Capital_Federal_y_GBA",
      countrycode == "ARG" & country_region == "ARG_GBA" ~ "ARG_AMBA_Capital_Federal_y_GBA",
      TRUE ~ country_region
    ),
    
    
    # Bolivia 
    prov = case_when(
      countrycode == "BOL" & prov == "Beni" ~ "El Beni",
      TRUE ~ prov
    ),
    
    # Brazil
    
    # Chile,
    prov = case_when(
      countrycode == "CHL" & prov == "1301" ~ "Tarapaca",
      countrycode == "CHL" & prov == "1302" ~ "Antofagasta",
      countrycode == "CHL" & prov == "1303" ~ "Atacama",
      countrycode == "CHL" & prov == "1304" ~ "Coquimbo",
      countrycode == "CHL" & prov == "1305" ~ "Valparaiso",
      
      countrycode == "CHL" & prov == "1306" ~ "Libertador General Bernardo O'Higgins",
      countrycode == "CHL" & prov == "1307" ~ "Maule",
      countrycode == "CHL" & prov == "1308" ~ "Bio-Bio (Nuble)",
      countrycode == "CHL" & prov == "1309" ~ "Araucania",
      
      countrycode == "CHL" & prov == "1310" ~ "Los Lagos",
      countrycode == "CHL" & prov == "1311" ~ "Aisen del General Carlos Ibanez del Campo",
      countrycode == "CHL" & prov == "1312" ~ "Magallanes y Antartica Chilena",
      
      countrycode == "CHL" & prov == "1313" ~ "Region Metropolitana de Santiago",
      countrycode == "CHL" & prov == "1314" ~ "Los Rios",
      countrycode == "CHL" & prov == "1315" ~ "Arica y Parinacota",
      TRUE ~ prov,
    ),
    country_region = case_when(
      countrycode == "CHL" & str_detect(country_region, "Central") == T ~ "CHL_Central",
      countrycode == "CHL" & str_detect(country_region, "North") == T ~ "CHL_North",
      countrycode == "CHL" & str_detect(country_region, "South") == T ~ "CHL_South",
      TRUE ~ country_region
    ),
    country_region = if_else(
      countrycode == "CHL" & prov == "Region Metropolitana de Santiago", 
      "CHL_Metropolitan", country_region),
    
    # Colombia
    prov = case_when(
      countrycode == "COL" & prov == "Bogot√°, D.C." ~ "Bogota",
      TRUE ~ prov
    ),
    
    country_region = case_when(
      countrycode == "COL" & prov == "La Guajira" ~ "COL_Atl√°ntica",
      countrycode == "COL" & prov == "Norte de Santander" ~ "COL_Oriental",
      countrycode == "COL" & prov == "Choco" ~ "COL_Pac√≠fica",
      countrycode == "COL" & prov == "Valle del Cauca" ~ "COL_Pac√≠fica",
      countrycode == "COL" & prov == "Quindio" ~ "COL_Central",
      
      TRUE ~ country_region,
    ),
    
    country_region = if_else(
      countrycode == "COL" & prov == "Bogota",
      "COL_Bogot√°",
      country_region
    ),
    
    # Costa Rica
    
    # Domnican Republic
    prov = case_when(
      countrycode == "DOM" & prov == "San Pedro de M." ~ "San Pedro de Macoris",
      countrycode == "DOM" & prov == "San Juan de la M." ~ "San Juan",
      countrycode == "DOM" & prov == "Ma. T. S√°nchez" ~ "Maria Trinidad Sanchez",
      TRUE ~ prov
    ),
    
    country_region = case_when(
      countrycode == "DOM" & prov %in% c("Santo Domingo", "Distrito Nacional") ~ "DOM_Metropolitana",
      countrycode == "DOM" & prov %in% c("Ma. T. S√°nchez", "San Pedro de M.", 
                                         "El Seybo", "La Romana", "La Altagracia") ~ "DOM_Este",
      countrycode == "DOM" & prov %in% c("Pedernales", "Independencia", 
                                         "Bahoruco", "Barahona",
                                         "Azua", "San Juan", "La Estrelleta", 
                                         "San Jose de Ocoa", "San Cristobal", "Peravia") ~ "DOM_Sur",
      countrycode == "DOM" & !(country_region %in% c("DOM_Sur", "DOM_Este", "DOM_Metropolitana")) ~ "DOM_Norte",
      TRUE ~ country_region
    ),
    
    # Dominica
    
    # Ecuador
    country_region = case_when(
      countrycode == "ECU" & prov == "Orellana" ~ "ECU_Oriente",
      countrycode == "ECU" & prov == "Pastaza" ~ "ECU_Oriente",
      
      countrycode == "ECU" & prov == "Santo Domingo de los Tsachilas" ~ "ECU_Sierra",
      countrycode == "ECU" & prov == "Carchi" ~ "ECU_Sierra",
      
      TRUE ~ country_region
    ),
    
    # El Salvador
    country_region = case_when(
      countrycode == "SLV" & prov %in% c("Chalatenango", "La Libertad", "Cuscatlan", "San Salvador") ~ "SLV_Regi√≥n_2_Central_1",
      countrycode == "SLV" & prov == "AMSS" ~ "SLV_Regi√≥n_5_AMSS",
      TRUE ~ country_region),
    
    country_region = case_when(
      countrycode == "SLV" & country_region == "SLV_Regi√≥n_1_Occidental" ~ "SLV_Occidental",
      countrycode == "SLV" & country_region == "SLV_Regi√≥n_2_Central_1" ~ "SLV_Central1",
      countrycode == "SLV" & country_region == "SLV_Regi√≥n_3_Central_2" ~ "SLV_Central2",
      countrycode == "SLV" & country_region == "SLV_Regi√≥n_4_Oriental" ~ "SLV_Oriental",
      countrycode == "SLV" & country_region == "SLV_Regi√≥n_5_AMSS" ~ "SLV_AMSS",
      TRUE ~ country_region,
    ),
    
    # Guatemala
    prov = case_when(
      countrycode == "GTM" & prov == "201" ~ "Guatemala",
      countrycode == "GTM" & prov == "202" ~ "El Progreso",
      countrycode == "GTM" & prov == "203" ~ "Sacatepequez",
      countrycode == "GTM" & prov == "204" ~ "Chimaltenango",
      countrycode == "GTM" & prov == "205" ~ "Escuintla",
      countrycode == "GTM" & prov == "206" ~ "Santa Rosa",
      countrycode == "GTM" & prov == "207" ~ "Solola",
      countrycode == "GTM" & prov == "208" ~ "Totonicapan",
      
      countrycode == "GTM" & prov == "209" & country_region == "GTM_Sur" ~ "Quezaltenango Sur",
      countrycode == "GTM" & prov == "209" & country_region == "GTM_Noroccidente" ~ "Quezaltenango",
      
      countrycode == "GTM" & prov == "210" ~ "Suchitepequez",
      countrycode == "GTM" & prov == "211" ~ "Retalhuleu",
      
      countrycode == "GTM" & prov == "212" & country_region == "GTM_Sur" ~ "San Marcos Sur",
      countrycode == "GTM" & prov == "212" & country_region == "GTM_Noroccidente" ~ "San Marcos",
      
      countrycode == "GTM" & prov == "213" ~ "Huehuetenango",
      countrycode == "GTM" & prov == "214" ~ "Quiche",
      countrycode == "GTM" & prov == "215" ~ "Baja Verapaz",
      countrycode == "GTM" & prov == "216" ~ "Alta Verapaz",
      countrycode == "GTM" & prov == "217" ~ "Peten",
      countrycode == "GTM" & prov == "218" ~ "Izabal",
      countrycode == "GTM" & prov == "219" ~ "Chiquimula",
      countrycode == "GTM" & prov == "220" ~ "Jalapa",
      countrycode == "GTM" & prov == "221" ~ "Jutiapa",
      TRUE ~ prov
    ),
    
    country_region = if_else(
      countrycode == "GTM" & prov == "Jalapa", "GTM_Sur", country_region
    ),
    
    # Haiti
    country_region = case_when(
      countrycode == "HIT" & country_region == "HTI_2201" ~ "HTI_Metropolitan_Area",
      countrycode == "HIT" & country_region == "HTI_2202" ~ "HTI_Northern",
      countrycode == "HIT" & country_region == "HTI_2203" ~ "HTI_Central",
      countrycode == "HIT" & country_region == "HTI_2204" ~ "HTI_Rest_of_West",
      countrycode == "HIT" & country_region == "HTI_2205" ~ "HTI_Southern",
      TRUE ~ country_region),
    
    # Haiti
    country_region = case_when(
      countrycode == "HTI" & country_region == "HTI_2201" ~ "HTI_Metropolitan_Area",
      countrycode == "HTI" & country_region == "HTI_2202" ~ "HTI_Northern",
      countrycode == "HTI" & country_region == "HTI_2203" ~ "HTI_Central",
      countrycode == "HTI" & country_region == "HTI_2204" ~ "HTI_Rest_of_West",
      countrycode == "HTI" & country_region == "HTI_2205" ~ "HTI_Southern",
      TRUE ~ country_region),
    
    # Honduras
    prov = case_when(
      countrycode == "HND" & prov == "401" ~ "Francisco Morazan",
      countrycode == "HND" & prov == "402" ~ "Comayagua",
      countrycode == "HND" & prov == "403" ~ "La Paz",
      countrycode == "HND" & prov == "404" ~ "Cortes",
      countrycode == "HND" & prov == "405" ~ "Atlantida",
      countrycode == "HND" & prov == "406" ~ "Colon",
      countrycode == "HND" & prov == "407" ~ "Yoro",
      countrycode == "HND" & prov == "408" ~ "Islas de la Bahia",
      countrycode == "HND" & prov == "409" ~ "Copan",
      countrycode == "HND" & prov == "410" ~ "Intibuca",
      countrycode == "HND" & prov == "411" ~ "Lempira",
      countrycode == "HND" & prov == "412" ~ "Ocotepeque",
      countrycode == "HND" & prov == "413" ~ "Santa Barbara",
      countrycode == "HND" & prov == "418" ~ "El Paraiso",
      countrycode == "HND" & prov == "419" ~ "Olancho",
      countrycode == "HND" & prov == "420" ~ "Gracias a Dios",
      countrycode == "HND" & prov == "421" ~ "Choluteca",
      countrycode == "HND" & prov == "422" ~ "Valle",
      TRUE ~ prov
    ),
    
    # Jamaica
    country_region = if_else(
      countrycode == "JAM" & prov %in% c("Kingston", "Saint Andrew"), "JAM_KMA", country_region
    ),
    country_region = if_else(
      countrycode == "JAM" & prov %in% c("Saint Catherine"), "JAM_MIDDLESEX", country_region
    ),
    
    # Nicaragua
    prov = case_when(
      countrycode == "NIC" & prov == "RAAN" ~ "Atlantico Norte",
      countrycode == "NIC" & prov == "RAAS" ~ "Atlantico Sur",
      countrycode == "NIC" & country_region == "NIC_Pacifico_Sur" & prov == "Managua" ~ "Managua Sur",
      TRUE ~ prov
    ),
    
    # Panama
    prov = case_when(
      countrycode == "PAN" & prov == "Comarca Ng√∂be Bugl√©" ~ "Ngobe Bugle",
      countrycode == "PAN" & prov == "Panam√°" & country_region == "PAN_Metropolitana" ~ "Panama Metro",
      TRUE ~ prov
    ),
    
    country_region = case_when(
      countrycode == "PAN" & prov %in% c("Chiriqui", "Bocas del Toro", "Ngobe Bugle") ~ "PAN_Occidental",
      countrycode == "PAN" & prov %in% c("Veraguas", "Herrera", "Los Santos", "Cocle") ~ "PAN_Central",
      countrycode == "PAN" & prov == "Panama Metro" ~ "PAN_Metropolitana",
      countrycode == "PAN" & !(country_region %in% c("PAN_Occidental", "PAN_Central", "PAN_Metropolitana")) ~ "PAN_Oriental",
      TRUE ~ country_region
    ),
    
    # Paraguay
    prov = case_when(
      countrycode == "PRY" & prov == "Pdte Hayes" ~ "Presidente Hayes",
      TRUE ~ prov
    ),
    
    country_region = case_when(
      countrycode == "PRY" & prov == "Alto Paraguay" ~ "PRY_Zona_Norte",
      countrycode == "PRY" & prov == "Canindeyu" ~ "PRY_Zona_Este",
      TRUE ~ country_region
    ),
    
    # Peru
    prov = case_when(
      countrycode == "PER" & prov == "1101" ~ "Amazonas",
      countrycode == "PER" & prov == "1102" ~ "Ancash",
      countrycode == "PER" & prov == "1103" ~ "Apurimac",
      countrycode == "PER" & prov == "1104" ~ "Arequipa",
      countrycode == "PER" & prov == "1105" ~ "Ayacucho",
      countrycode == "PER" & prov == "1106" ~ "Cajamarca",
      countrycode == "PER" & prov == "1107" ~ "Callao",
      countrycode == "PER" & prov == "1108" ~ "Cusco",
      countrycode == "PER" & prov == "1109" ~ "Huancavelica",
      countrycode == "PER" & prov == "1110" ~ "Huanuco",
      countrycode == "PER" & prov == "1111" ~ "Ica",
      countrycode == "PER" & prov == "1112" ~ "Junin",
      countrycode == "PER" & prov == "1113" ~ "La Libertad",
      countrycode == "PER" & prov == "1114" ~ "Lambayeque",
      countrycode == "PER" & prov == "1115" ~ "Lima",
      countrycode == "PER" & prov == "1116" ~ "Loreto",
      countrycode == "PER" & prov == "1118" ~ "Madre de Dios",
      countrycode == "PER" & prov == "1118" ~ "Moquegua",
      countrycode == "PER" & prov == "1119" ~ "Pasco",
      countrycode == "PER" & prov == "1120" ~ "Piura",
      countrycode == "PER" & prov == "1121" ~ "Puno",
      countrycode == "PER" & prov == "1122" ~ "San Martin",
      countrycode == "PER" & prov == "1123" ~ "Tacna",
      countrycode == "PER" & prov == "1124" ~ "Tumbes",
      countrycode == "PER" & prov == "1125" ~ "Ucayali",
      TRUE ~ as.character(prov)
    ),
    country_region = case_when(
      countrycode == "PER" & prov %in% c("Amazonas", "Loreto", "San Martin", "Ucayali", "Madre de Dios") ~ "PER_Selva",
      countrycode == "PER" & prov %in% c("Ica", "Arequipa", "Moquegua", "Tacna") ~ "PER_Costa_Sur",
      countrycode == "PER" & prov %in% c("Puno", "Cusco", "Apurimac", "Ayacucho", "Huancavelica") ~ "PER_Sierra_Sur",
      countrycode == "PER" & prov %in% c("Junin", "Pasco", "Huanuco", "Ancash", "Ica Sierra Centro", "Lima Sierra Centro", "La Libertad Sierra Centro") ~ "PER_Sierra_Centro",
      countrycode == "PER" & prov == "Callao" | prov == "Lima" ~ "PER_Lima_Metropolitana",
      countrycode == "PER" & prov %in% c("Tumbes", "Piura", "Lambayeque", "Ancash Costa Norte", "La Libertad", "Lima Costa Norte", "Cajamarca Costa Norte") ~ "PER_Costa_Norte",
      countrycode == "PER" & prov %in% c("Piura Sierra Norte", "Cajamarca", "La Libertad Sierra Norte") ~ "PER_Sierra_Norte",
      TRUE ~ country_region
    ),
    
    # Uruguay
    prov = case_when(
      countrycode == "URY" & prov == "1401" ~ "Montevideo",
      countrycode == "URY" & prov == "1402" ~ "Artigas",
      countrycode == "URY" & prov == "1403" ~ "Canelones",
      countrycode == "URY" & prov == "1404" ~ "Cerro Largo",
      countrycode == "URY" & prov == "1405" ~ "Colonia",
      countrycode == "URY" & prov == "1406" ~ "Durazno",
      countrycode == "URY" & prov == "1407" ~ "Florida",
      countrycode == "URY" & prov == "1408" ~ "Lavalleja",
      countrycode == "URY" & prov == "1409" ~ "Maldonado",
      countrycode == "URY" & prov == "1410" ~ "Paysandu",
      countrycode == "URY" & prov == "1411" ~ "Rio Negro",
      countrycode == "URY" & prov == "1412" ~ "Rivera",
      countrycode == "URY" & prov == "1413" ~ "Rocha",
      countrycode == "URY" & prov == "1414" ~ "Salto",
      countrycode == "URY" & prov == "1415" ~ "San Jose",
      countrycode == "URY" & prov == "1416" ~ "Soriano",
      countrycode == "URY" & prov == "1417" ~ "Tacuarembo",
      countrycode == "URY" & prov == "1418" ~ "Treinta y Tres",
      TRUE ~ as.character(prov)
    ),
    
    # Haiti
    country_region = case_when(
      countrycode == "HTI" & prov %in% c("Grand'Anse", "Sud", "Nippes", "Sud-Est") ~ "HTI_Southern", 
      countrycode == "HTI" & prov %in% c("Nord-Ouest", "Nord", "Nord-Est") ~ "HTI_Northern", 
      countrycode == "HTI" & prov == "Ouest" ~ "HTI_Rest_of_the_West",
      countrycode == "HTI" & prov == "Metro Area" ~ "HTI_Metro_Area",
      countrycode == "HTI" & prov %in% c("L'Artibonite", "Centre") ~ "HTI_Central", 
      TRUE ~ country_region
    ),
    
    # Venezuela
    country_region = case_when(
      countrycode == "VEN" & prov %in% c("Amazonas", "Bolivar", "Delta Amacuro") ~ "VEN_Guayana",
      countrycode == "VEN" & prov %in% c("Anzoategui", "Monagas", "Sucre", "Nueva Esparta") ~ "VEN_Oriental",
      countrycode == "VEN" & prov %in% c("Zulia") ~ "VEN_Zuliana",
      countrycode == "VEN" & prov %in% c("Tachira", "Merida", "Trujillo") ~ "VEN_Andes",
      countrycode == "VEN" & prov %in% c("Lara", "Yaracuy", "Falcon") ~ "VEN_Centro_Occidental",
      countrycode == "VEN" & prov %in% c("Carabobo", "Aragua") ~ "VEN_Centro",
      countrycode == "VEN" & prov %in% c("Vargas", "Distrito Capital", "Miranda") ~ "VEN_Capital",
      countrycode == "VEN" & !(country_region %in% c("VEN_Guayana", "VEN_Oriental", "VEN_Zuliana", "VEN_Andes", "VEN_Centro_Occidental", "VEN_Centro", "VEN_Capital")) ~ "VEN_Llanos",
      TRUE ~ country_region
    ),
    
    # Bahamas 
    country_region = if_else(countrycode == "BHS", "BHS", country_region),
    
    # Belize 
    country_region = if_else(countrycode == "BLZ", "BLZ", country_region),
    
    # Barbados
    country_region = if_else(countrycode == "BRB", "BRB", country_region),
    
    # Dominica
    country_region = if_else(countrycode == "DMA", "DMA", country_region),
    
    # Grenada
    country_region = if_else(countrycode == "GRD", "GRD", country_region),
    
    # Guyana
    country_region = if_else(countrycode == "GUY", "GUY", country_region),
    
    # Suriname
    country_region = if_else(countrycode == "SUR", "SUR", country_region),
    
    # St. Kitts & Nevis
    country_region = if_else(countrycode == "KNA", "KNA", country_region),
    
    # St. Lucia
    country_region = if_else(countrycode == "LCA", "LCA", country_region),
    
    # St. Vincent
    country_region = if_else(countrycode == "VCT", "VCT", country_region),
    
    # Trinidad & Tobago
    country_region = if_else(countrycode == "TTO", "TTO", country_region),
    
  ) 

#
# Save data ----
lapop |> write_rds("data/derived/lapop_merge_countries.rds")

####### 
# --- LAPOP merge datasets per year ----
# 2012 ----
lapop_merge_12 <- 
  read_dta("data/source/lapop/AmericasBarometer Merged 2012 English Rev1.5_W.dta") |> 
  filter(!(pais %in% c("United States", "Canada"))) |> 
  haven::as_factor(
    levels = c("default"),
    ordered = FALSE
  ) |>
  select(any_of(variables_harmonized))

#
# 2014 ----
# Note: .dta file is damaged
lapop_merge_14 <- 
  haven::read_sav("data/source/lapop/AmericasBarometer Merged 2014 English v3.0_W.sav") |> 
  haven::as_factor(
    levels = c("default"),
    ordered = FALSE
  ) |> 
  filter(!(pais %in% c("United States", "Canada"))) |> 
  select(any_of(variables_harmonized))

#
# 2016 ----
lapop_merge_16 <- 
  read_dta("data/source/lapop/2016 LAPOP AmericasBarometer Merge_v1.5_W.dta") |> 
  filter(!(pais %in% c("United States", "Canada"))) |> 
  haven::as_factor(
    levels = c("default"),
    ordered = FALSE
  ) |> 
  select(any_of(variables_harmonized))

#

# Join datasets (2012, 2014, 2016) ----
lapop_years <- 
  lapop_merge_12 |> 
  mutate_at(
    vars(wt, weight1500),
    ~ as.numeric(as.character(.))
  ) |> 
  bind_rows(
    lapop_merge_14 |> 
      mutate(
        year = as.factor("2014")
      ) |> 
      mutate_at(
        vars(wt, weight1500),
        ~ as.numeric(as.character(.))
      ) 
  ) |> 
  bind_rows(
    lapop_merge_16 |> 
      mutate(
        year = as.factor(as.character(year))
      )
  )



